// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import {
  Aws,
  aws_lambda as lambda,
  aws_iam as iam,
  triggers,
  Duration,
} from "aws-cdk-lib";

import { Construct } from "constructs";
import { addCfnSuppressRules } from "../cfn_nag/cfn_nag_utils";

export interface IConfigProps {
  WCU: string;
  LAMBDA_EDGE_VERSION_SSM_PARAM: string;
  WAF_RULE_NAME_SSM_PARAM: string;
  WAF_RULE_ID_SSM_PARAM: string;
  DEPLOY_LE: boolean;
  METRICS: boolean;
  SOLUTION_IDENTIFIER: string;
}

export class CRCreateLEWafRule extends Construct {

    public readonly roleToPass: iam.IRole;

    constructor(scope: Construct, id: string, props: IConfigProps) {


    super(scope, id);

    const triggerPolicy = new iam.PolicyDocument({
      statements: [
        new iam.PolicyStatement({
          resources: [`arn:aws:lambda:*:${Aws.ACCOUNT_ID}:function:*`],
          actions: [
            "lambda:CreateFunction",
            "lambda:PublishVersion",
            "lambda:GetFunctionConfiguration",
          ],
        }),
        new iam.PolicyStatement({
          resources: ["*"],
          actions: ["iam:PassRole"],
          conditions: {
            StringEquals: {
              "iam:PassedToService": ["lambda.amazonaws.com"],
            },
          },
        }),
        new iam.PolicyStatement({
          resources: [
            `arn:aws:ssm:${Aws.REGION}:${Aws.ACCOUNT_ID}:parameter/*`,
          ],
          actions: ["ssm:PutParameter"],
        }),
        new iam.PolicyStatement({
          resources: [
            `arn:aws:wafv2:us-east-1:${Aws.ACCOUNT_ID}:global/rulegroup/*/*`,
          ],
          actions: ["wafv2:CreateRuleGroup"],
        }),
      ],
    });


    const lambdaEdgePolicy = new iam.PolicyDocument({
      statements: [
        new iam.PolicyStatement({
          resources: [`arn:aws:execute-api:${Aws.REGION}:*:*/*`],
          actions: [
            "execute-api:Invoke"
          ],
        })
      ],
    });

    const { managedPolicyArn } = iam.ManagedPolicy.fromAwsManagedPolicyName(
      "service-role/AWSLambdaBasicExecutionRole"
    );

    const triggerRole = new iam.Role(this, "TriggerLERole", {
      assumedBy: new iam.CompositePrincipal(
        new iam.ServicePrincipal("edgelambda.amazonaws.com"),
        new iam.ServicePrincipal("lambda.amazonaws.com"),
        
      ),
      managedPolicies: [
        {
          managedPolicyArn,
        },
      ],
      inlinePolicies: {
        myPolicy: triggerPolicy,
      },
    });

    addCfnSuppressRules(triggerRole, [
      {
        id: "W11",
        reason:
          "The resource is a Custom Resource, automatically generated by CDK",
      },
    ]);
    addCfnSuppressRules(triggerRole, [
      {
        id: "F38",
        reason:
          "The resource is a Custom Resource, automatically generated by CDK, impossible to get the arn",
      },
    ]);

    const roleToPass = new iam.Role(this, "EdgeLambdaServiceRole", {
      assumedBy: new iam.CompositePrincipal(
        new iam.ServicePrincipal("edgelambda.amazonaws.com"),
        new iam.ServicePrincipal("lambda.amazonaws.com")
      ),
      managedPolicies: [
        {
          managedPolicyArn,
        },
      ],
      inlinePolicies: {
        myPolicy: lambdaEdgePolicy,
      },
    });

    const archiverLayer = new lambda.LayerVersion(this, "AdmZipLayer", {
      compatibleRuntimes: [lambda.Runtime.NODEJS_18_X],
      code: lambda.Code.fromAsset("lambda/layers/admzip"),
      description: "Layer used to zip lambda edge file",
    });

    new triggers.TriggerFunction(this, "UsEast1Trigger", { // NOSONAR
      functionName: Aws.STACK_NAME + "_CustomResourceUsEast1",
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: "index.handler",
      timeout: Duration.seconds(600),
      code: lambda.Code.fromAsset("lambda/custom_resource_us_east_1"),
      layers: [archiverLayer],
      environment: {
        ROLE_ARN: roleToPass.roleArn,
        STACK_NAME: Aws.STACK_NAME,
        LAMBDA_VERSION: props.LAMBDA_EDGE_VERSION_SSM_PARAM,
        WCU: props.WCU,
        RULE_ID: props.WAF_RULE_ID_SSM_PARAM,
        RULE_NAME: props.WAF_RULE_NAME_SSM_PARAM,
        DEPLOY_LE: props.DEPLOY_LE ? "1" : "0",
        METRICS: String(props.METRICS),
        SOLUTION_IDENTIFIER: props.SOLUTION_IDENTIFIER
      },

      role: triggerRole,
    });

    this.roleToPass = roleToPass;
  }
}
